name: PyPI + MkDocs

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [published]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dev dependencies
        run: pip install -e ".[dev]"

      - name: Run pytest
        run: pytest

  build_package:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: python -m pip install build

      - name: Build distribution
        run: python -m build

      - name: Upload distribution
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

  publish_testpypi:
    name: Publish to TestPyPI
    needs: [build_package]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/project/soma-curation/
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.release.prerelease == true
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

      - name: Publish to TestPyPI (trusted publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish_pypi:
    name: Publish to PyPI
    needs: [build_package]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/soma-curation/
    permissions:
      id-token: write
    if: github.event_name == 'release' && github.event.release.prerelease == false
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist/

      - name: Publish to PyPI (trusted publishing)
        uses: pypa/gh-action-pypi-publish@release/v1

  deploy_docs:
    name: Deploy Docs
    needs: [publish_pypi]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          pip install -e ".[docs]"

      - name: Setup Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Deploy Documentation
        run: |
          if [[ $GITHUB_EVENT_NAME == 'release' ]]; then
            # For releases, deploy with the tag version
            VERSION=${GITHUB_REF#refs/tags/}
            mike deploy --push --update-aliases $VERSION latest
          else
            # For main branch, deploy as dev
            mike deploy --push --update-aliases dev
          fi
